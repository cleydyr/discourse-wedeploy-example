hack: true
_FILE_SEPERATOR_
params:
  db_synchronous_commit: "off"
  db_shared_buffers: "256MB"
  db_work_mem: "10MB"
  db_default_text_search_config: "pg_catalog.english"
  db_name: discourse
  db_user: discourse
  db_wal_level: minimal
  db_max_wal_senders: 0
  db_checkpoint_segments: 6
  db_logging_collector: off
  db_log_min_duration_statement: 100

hooks:
  before_code:
    - replace:
       filename: /etc/service/unicorn/run
       from: "# postgres"
       to: sv start postgres || exit 1

run:
  - exec: locale-gen $LANG && update-locale
  - exec: mkdir -p /shared/postgres_run
  - exec: chown postgres:postgres /shared/postgres_run
  - exec: chmod 775 /shared/postgres_run
  - exec: rm -fr /var/run/postgresql
  - exec: ln -s /shared/postgres_run /var/run/postgresql
  - exec: socat /dev/null UNIX-CONNECT:/shared/postgres_run/.s.PGSQL.5432 || exit 0 && echo postgres already running stop container ; exit 1
  - exec: rm -fr /shared/postgres_run/.s*
  - exec: rm -fr /shared/postgres_run/*.pid
  - exec: mkdir -p /shared/postgres_run/10-main.pg_stat_tmp
  - exec: chown postgres:postgres /shared/postgres_run/10-main.pg_stat_tmp
  - file:
     path: /etc/service/postgres/run
     chmod: "+x"
     contents: |
        #!/bin/sh
        exec 2>&1
        HOME=/var/lib/postgresql USER=postgres exec thpoff chpst -u postgres:postgres:ssl-cert -U postgres:postgres:ssl-cert /usr/lib/postgresql/10/bin/postmaster -D /etc/postgresql/10/main

  - file:
     path: /etc/service/postgres/log/run
     chmod: "+x"
     contents: |
       #!/bin/sh
       mkdir -p /var/log/postgres
       exec svlogd /var/log/postgres

  - file:
     path: /etc/runit/3.d/99-postgres
     chmod: "+x"
     contents: |
       #!/bin/bash
       sv stop postgres

  - file:
     path: /root/upgrade_postgres
     chmod: "+x"
     contents: |
       #!/bin/bash
       PG_MAJOR_OLD=`cat /shared/postgres_data/PG_VERSION`

       if [ ! "10" = "$PG_MAJOR_OLD" ]; then
         echo Upgrading PostgreSQL from version ${PG_MAJOR_OLD} to 10
         free_disk=$(df /shared | tail -n 1 | awk '{print $4}')
         required=$(($(du -s /shared/postgres_data | awk '{print $1}') * 2))

         if [ "$free_disk" -lt "$required" ]; then
          echo "WARNING: Upgrading PostgresSQL would require an addtional $(numfmt --to=si $(($required - $free_disk))) of disk space"
          echo "Please free up some space, or expand your disk, before continuing."
          echo ''
          echo 'To avoid upgrading change "templates/postgres.template.yml" TO "templates/postgres.9.5.template.yml" in containers/app.yml'
          exit 1
         fi

         rm -fr /shared/postgres_data_new
         install -d -m 0755 -o postgres -g postgres /shared/postgres_data_new && sudo -u postgres /usr/lib/postgresql/10/bin/initdb -D /shared/postgres_data_new || exit 0
         apt-get update
         apt-get install -y postgresql-${PG_MAJOR_OLD}
         chown -R postgres:postgres /var/lib/postgresql/10
         /etc/init.d/postgresql stop
         rm -fr /shared/postgres_data/postmaster.pid
         cd ~postgres
         cp -pr /etc/postgresql/${PG_MAJOR_OLD}/main/* /shared/postgres_data
         echo  >> /shared/postgres_data/postgresql.conf
         echo "data_directory = '/shared/postgres_data'" >> /shared/postgres_data/postgresql.conf
         SUCCESS=true
         sudo -u postgres /usr/lib/postgresql/10/bin/pg_upgrade -d /shared/postgres_data -D /shared/postgres_data_new -b /usr/lib/postgresql/${PG_MAJOR_OLD}/bin -B /usr/lib/postgresql/10/bin || SUCCESS=false

         if [[ "$SUCCESS" == 'false' ]]; then
           echo -------------------------------------------------------------------------------------
           echo UPGRADE OF POSTGRES FAILED
           echo
           echo You are going to need to export your data and import into a clean instance:
           echo

           if [ "$PG_MAJOR_OLD" = "9.5" ]; then
             echo 'In containers/app.yml: Change "templates/postgres.template.yml" TO "templates/postgres.9.5.template.yml"'
             echo
           fi

           echo Run "./launcher rebuild app" again
           echo
           echo When your instance is running:
           echo Run "./launcher enter app"
           echo Run apt-get remove postgresql-client-9.5 && apt-get instatll postgresql-client-10
           echo Run "cd /shared/postgres_backup && sudo -u postgres pg_dump discourse > backup.db"
           echo

           if [ "$PG_MAJOR_OLD" = "9.5" ]; then
             echo Undo the base_image in your container config
           fi

           echo Run: "./launcher stop app"
           echo Run: "sudo mv /var/discourse/shared/standalone/postgres_data /var/discourse/shared/standalone/postgres_data_old"
           echo Run: "./launcher rebuild app"
           echo
           echo Run: "./launcher enter app"
           echo Run: "cd /shared/postgres_backup"
           echo Run: "sv stop unicorn"
           echo Run: "sudo -iu postgres dropdb discourse"
           echo Run: "sudo -iu postgres createdb discourse"
           echo Run: "sudo -iu postgres psql discourse < backup.db"
           echo Run: "exit"
           echo Run: "./launcher rebuild app"
           exit 1
         fi

         mv /shared/postgres_data /shared/postgres_data_old
         mv /shared/postgres_data_new /shared/postgres_data

         echo -------------------------------------------------------------------------------------
         echo UPGRADE OF POSTGRES COMPLETE
         echo
         echo Old ${PG_MAJOR_OLD} database is stored at /shared/postgres_data_old
         echo
         echo To complete the upgrade, rebuild again using:
         echo
         echo     ./launcher rebuild app
         echo -------------------------------------------------------------------------------------
         # Magic exit status to denote no failure
         exit 77
       fi

  - exec:
      cmd:
        - chown -R root /var/lib/postgresql/10/main
        - "[ ! -e /shared/postgres_data ] && install -d -m 0755 -o postgres -g postgres /shared/postgres_data && sudo -E -u postgres /usr/lib/postgresql/10/bin/initdb -D /shared/postgres_data || exit 0"
        - chown -R postgres:postgres /shared/postgres_data
        - chown -R postgres:postgres /var/run/postgresql

  - exec: /root/upgrade_postgres
  - exec: rm /root/upgrade_postgres

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: "data_directory = '/var/lib/postgresql/10/main'"
      to: "data_directory = '/shared/postgres_data'"

  # listen on all interfaces
  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?listen_addresses *=.*/
      to: "listen_addresses = '*'"

  # sync commit off is faster and less spiky, also marginally less safe
  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?synchronous_commit *=.*/
      to: "synchronous_commit = $db_synchronous_commit"

  # default is 128MB which is way too small
  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?shared_buffers *=.*/
      to: "shared_buffers = $db_shared_buffers"

  # default is 1MB which is too small
  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?work_mem *=.*/
      to: "work_mem = $db_work_mem"

  # allow for other
  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?default_text_search_config *=.*/
      to: "default_text_search_config = '$db_default_text_search_config'"

  # Necessary to enable backups
  - exec:
      cmd:
        - install -d -m 0755 -o postgres -g postgres /shared/postgres_backup

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?max_wal_senders *=.*/
      to: "max_wal_senders = $db_max_wal_senders"

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?wal_level *=.*/
      to: "wal_level = $db_wal_level"

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?checkpoint_segments *=.*/
      to: "checkpoint_segments = $db_checkpoint_segments"

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?logging_collector *=.*/
      to: "logging_collector = $db_logging_collector"

  - replace:
      filename: "/etc/postgresql/10/main/postgresql.conf"
      from: /#?log_min_duration_statement *=.*/
      to: "log_min_duration_statement = $db_log_min_duration_statement"

  - replace:
      filename: "/etc/postgresql/10/main/pg_hba.conf"
      from: /^#local +replication +postgres +peer$/
      to: "local replication postgres  peer"

  # allow all to connect in with md5 auth
  - replace:
      filename: "/etc/postgresql/10/main/pg_hba.conf"
      from: /^host.*all.*all.*127.*$/
      to: "host all all 0.0.0.0/0 md5"

  - exec:
      background: true
      # use fast shutdown for pg
      stop_signal: INT
      cmd: HOME=/var/lib/postgresql USER=postgres exec chpst -u postgres:postgres:ssl-cert -U postgres:postgres:ssl-cert /usr/lib/postgresql/10/bin/postmaster -D /etc/postgresql/10/main

  # give db a few secs to start up
  - exec: "sleep 5"

  - exec: su postgres -c 'createdb $db_name' || true
  - exec: su postgres -c 'psql $db_name -c "create user $db_user;"' || true
  - exec: su postgres -c 'psql $db_name -c "grant all privileges on database $db_name to $db_user;"' || true
  - exec: su postgres -c 'psql $db_name -c "alter schema public owner to $db_user;"'
  - exec: su postgres -c 'psql template1 -c "create extension if not exists hstore;"'
  - exec: su postgres -c 'psql template1 -c "create extension if not exists pg_trgm;"'
  - exec: su postgres -c 'psql $db_name -c "create extension if not exists hstore;"'
  - exec: su postgres -c 'psql $db_name -c "create extension if not exists pg_trgm;"'
  - exec:
      stdin: |
        update pg_database set encoding = pg_char_to_encoding('UTF8') where datname = '$db_name' AND encoding = pg_char_to_encoding('SQL_ASCII');
      cmd: sudo -u postgres psql $db_name
      raise_on_fail: false

  - file:
     path: /var/lib/postgresql/take-database-backup
     chown: postgres:postgres
     chmod: "+x"
     contents: |
        #!/bin/bash
        ID=db-$(date +%F_%T)
        FILENAME=/shared/postgres_backup/$ID.tar.gz
        pg_basebackup --format=tar --pgdata=- --xlog --gzip --label=$ID > $FILENAME
        echo $FILENAME

  - file:
     path: /var/spool/cron/crontabs/postgres
     contents: |
        # m h  dom mon dow   command
        #MAILTO=?
        #0 */4 * * * /var/lib/postgresql/take-database-backup

  - exec:
      hook: postgres
      cmd: "echo postgres installed!"
_FILE_SEPERATOR_
run:
  - file:
     path: /etc/service/redis/run
     chmod: "+x"
     contents: |
        #!/bin/sh
        exec 2>&1
        exec thpoff chpst -u redis -U redis /usr/bin/redis-server /etc/redis/redis.conf
  - file:
     path: /etc/service/redis/log/run
     chmod: "+x"
     contents: |
       #!/bin/sh
       mkdir -p /var/log/redis
       exec svlogd /var/log/redis
  - file:
     path: /etc/runit/3.d/10-redis
     chmod: "+x"
     contents: |
       #!/bin/bash
       sv stop redis

  - replace:
      filename: "/etc/redis/redis.conf"
      from: "daemonize yes"
      to: ""
  - replace:
      filename: "/etc/redis/redis.conf"
      from: /^pidfile.*$/
      to: ""

  - exec:
      cmd:
        - install -d -m 0755 -o redis -g redis /shared/redis_data

  - replace:
      filename: "/etc/redis/redis.conf"
      from: /^logfile.*$/
      to: "logfile \"\""

  - replace:
      filename: "/etc/redis/redis.conf"
      from: /^bind .*$/
      to: ""

  - replace:
      filename: "/etc/redis/redis.conf"
      from: /^dir .*$/
      to: "dir /shared/redis_data"

  - exec:
      cmd: echo redis installed
      hook: redis
  - exec: cat /etc/redis/redis.conf | grep logfile

  - exec:
      background: true
      cmd: exec chpst -u redis -U redis /usr/bin/redis-server /etc/redis/redis.conf

  - exec: sleep 10

# we can not migrate without redis, launch it if needed
hooks:
  before_code:
    - exec:
        background: true
        cmd: exec chpst -u redis -U redis /usr/bin/redis-server /etc/redis/redis.conf
  after_code:
    - replace:
       filename: /etc/service/unicorn/run
       from: "# redis"
       to: sv start redis || exit 1
_FILE_SEPERATOR_
env:
  # You can have redis on a different box
  RAILS_ENV: 'production'
  UNICORN_WORKERS: 3
  UNICORN_SIDEKIQS: 1
  # this gives us very good cache coverage, 96 -> 99
  # in practice it is 1-2% perf improvement
  RUBY_GLOBAL_METHOD_CACHE_SIZE: 131072
  # stop heap doubling in size so aggressively, this conserves memory
  RUBY_GC_HEAP_GROWTH_MAX_SLOTS: 40000
  RUBY_GC_HEAP_INIT_SLOTS: 400000
  RUBY_GC_HEAP_OLDOBJECT_LIMIT_FACTOR: 1.5

  DISCOURSE_DB_SOCKET: /var/run/postgresql
  DISCOURSE_DB_HOST:
  DISCOURSE_DB_PORT:


params:
  # SSH key is required for remote access into the container
  version: tests-passed

  home: /var/www/discourse
  upload_size: 10m

run:
  - exec: thpoff echo "thpoff is installed!"
  - exec: /usr/local/bin/ruby -e 'if ENV["DISCOURSE_SMTP_ADDRESS"] == "smtp.example.com"; puts "Aborting! Mail is not configured!"; exit 1; end'
  - exec: /usr/local/bin/ruby -e 'if ENV["DISCOURSE_HOSTNAME"] == "discourse.example.com"; puts "Aborting! Domain is not configured!"; exit 1; end'
  - exec: chown -R discourse /home/discourse
  # TODO: move to base image (anacron can not be fired up using rc.d)
  - exec: rm -f /etc/cron.d/anacron
  - file:
     path: /etc/cron.d/anacron
     contents: |
        SHELL=/bin/sh
        PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

        30 7    * * *   root	/usr/sbin/anacron -s >/dev/null
  - file:
     path: /etc/runit/1.d/copy-env
     chmod: "+x"
     contents: |
        #!/bin/bash
        env > ~/boot_env
        conf=/var/www/discourse/config/discourse.conf

        # find DISCOURSE_ env vars, strip the leader, lowercase the key
        /usr/local/bin/ruby -e 'ENV.each{|k,v| puts "#{$1.downcase} = '\''#{v}'\''" if k =~ /^DISCOURSE_(.*)/}' > $conf

  - file:
     path: /etc/runit/1.d/enable-brotli
     chmod: "+x"
     contents: |
        #!/bin/bash
        [ ! -z "$COMPRESS_BROTLI" ] && sed -i "s/. brotli/  brotli/" /etc/nginx/conf.d/discourse.conf || sed -i "s/. brotli/# brotli/" /etc/nginx/conf.d/discourse.conf

  - file:
     path: /etc/service/unicorn/run
     chmod: "+x"
     contents: |
        #!/bin/bash
        exec 2>&1
        # redis
        # postgres
        cd $home
        chown -R discourse:www-data /shared/log/rails
        LD_PRELOAD=$RUBY_ALLOCATOR HOME=/home/discourse USER=discourse exec thpoff chpst -u discourse:www-data -U discourse:www-data bundle exec config/unicorn_launcher -E production -c config/unicorn.conf.rb

  - file:
     path: /etc/service/nginx/run
     chmod: "+x"
     contents: |
        #!/bin/sh
        exec 2>&1
        exec /usr/sbin/nginx

  - file:
     path: /etc/runit/3.d/01-nginx
     chmod: "+x"
     contents: |
       #!/bin/bash
       sv stop nginx

  - file:
     path: /etc/runit/3.d/02-unicorn
     chmod: "+x"
     contents: |
       #!/bin/bash
       sv stop unicorn

  - exec:
      cd: $home
      hook: code
      cmd:
        - git reset --hard
        - git clean -f
        - git remote set-branches --add origin master
        - git pull
        - git fetch origin $version
        - git checkout $version
        - mkdir -p tmp/pids
        - mkdir -p tmp/sockets
        - touch tmp/.gitkeep
        - mkdir -p                    /shared/log/rails
        - bash -c "touch -a           /shared/log/rails/{production,production_errors,unicorn.stdout,unicorn.stderr}.log"
        - bash -c "ln    -s           /shared/log/rails/{production,production_errors,unicorn.stdout,unicorn.stderr}.log $home/log"
        - bash -c "mkdir -p           /shared/{uploads,backups}"
        - bash -c "ln    -s           /shared/{uploads,backups} $home/public"
        - bash -c "mkdir -p           /shared/tmp/{backups,restores}"
        - bash -c "ln    -s           /shared/tmp/{backups,restores} $home/tmp"
        - chown -R discourse:www-data /shared/log/rails /shared/uploads /shared/backups /shared/tmp

  - exec:
      cmd:
        - "cp $home/config/nginx.sample.conf /etc/nginx/conf.d/discourse.conf"
        - "rm /etc/nginx/sites-enabled/default"
        - "mkdir -p /var/nginx/cache"

  - replace:
      filename: /etc/nginx/nginx.conf
      from: pid /run/nginx.pid;
      to: daemon off;

  - replace:
      filename: "/etc/nginx/conf.d/discourse.conf"
      from: /upstream[^\}]+\}/m
      to: "upstream discourse {
        server 127.0.0.1:3000;
      }"

  - replace:
      filename: "/etc/nginx/conf.d/discourse.conf"
      from: /server_name.+$/
      to: server_name _ ;

  - replace:
      filename: "/etc/nginx/conf.d/discourse.conf"
      from: /client_max_body_size.+$/
      to: client_max_body_size $upload_size ;

  - exec:
      cmd: echo "done configuring web"
      hook: web_config

  - exec:
      cd: $home
      hook: web
      cmd:
        # ensure we are on latest bundler
        - gem update bundler
        - find $home ! -user discourse -exec chown discourse {} \+

  - exec:
      cd: $home
      hook: bundle_exec
      cmd:
        - su discourse -c 'bundle install --deployment --verbose --without test --without development --retry 3 --jobs 4'
        - su discourse -c 'bundle exec rake db:migrate'
        - su discourse -c 'bundle exec rake assets:precompile'

  - file:
     path: /usr/local/bin/discourse
     chmod: +x
     contents: |
       #!/bin/bash
       (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec script/discourse "$@")

  - file:
     path: /usr/local/bin/rails
     chmod: +x
     contents: |
       #!/bin/bash
       # If they requested a console, load pry instead
       if [ "$*" == "c" -o "$*" == "console" ]
       then
        (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec pry -r ./config/environment)
       else
        (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec script/rails "$@")
       fi

  - file:
     path: /usr/local/bin/rake
     chmod: +x
     contents: |
       #!/bin/bash
       (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec bin/rake "$@")

  - file:
     path: /usr/local/bin/rbtrace
     chmod: +x
     contents: |
       #!/bin/bash
       (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec rbtrace "$@")

  - file:
     path: /usr/local/bin/stackprof
     chmod: +x
     contents: |
       #!/bin/bash
       (cd /var/www/discourse && RAILS_ENV=production sudo -H -E -u discourse bundle exec stackprof "$@")

  - file:
     path: /etc/update-motd.d/10-web
     chmod: +x
     contents: |
       #!/bin/bash
       echo
       echo Use: rails, rake or discourse to execute commands in production
       echo

  - file:
     path: /etc/logrotate.d/rails
     contents: |
        /shared/log/rails/*.log
        {
                rotate 7
                dateext
                daily
                missingok
                delaycompress
                compress
                postrotate
                sv 1 unicorn
                endscript
        }

  - file:
     path: /etc/logrotate.d/nginx
     contents: |
        /var/log/nginx/*.log {
          daily
          missingok
          rotate 7
          compress
          delaycompress
          create 0644 www-data www-data
          sharedscripts
          postrotate
            sv 1 nginx
          endscript
        }

  # move state out of the container this fancy is done to support rapid rebuilds of containers,
  # we store anacron and logrotate state outside the container to ensure its maintained across builds
  # later move this snipped into an intialization script
  # we also ensure all the symlinks we need to /shared are in place in the correct structure
  # this allows us to bootstrap on one machine and then run on another
  - file:
      path: /etc/runit/1.d/00-ensure-links
      chmod: +x
      contents: |
        #!/bin/bash
        if [[ ! -L /var/lib/logrotate ]]; then
          rm -fr /var/lib/logrotate
          mkdir -p /shared/state/logrotate
          ln -s /shared/state/logrotate /var/lib/logrotate
        fi
        if [[ ! -L /var/spool/anacron ]]; then
          rm -fr /var/spool/anacron
          mkdir -p /shared/state/anacron-spool
          ln -s /shared/state/anacron-spool /var/spool/anacron
        fi
        if [[ ! -d /shared/log/rails ]]; then
          mkdir -p /shared/log/rails
          chown -R discourse:www-data /shared/log/rails
        fi
        if [[ ! -d /shared/uploads ]]; then
          mkdir -p /shared/uploads
          chown -R discourse:www-data /shared/uploads
        fi
        if [[ ! -d /shared/backups ]]; then
          mkdir -p /shared/backups
          chown -R discourse:www-data /shared/backups
        fi

        rm -rf /shared/tmp/{backups,restores}
        mkdir -p /shared/tmp/{backups,restores}
        chown -R discourse:www-data /shared/tmp/{backups,restores}

  # change login directory to Discourse home
  - file:
     path: /root/.bash_profile
     chmod: 644
     contents: |
        cd $home
